ggplot(odds, aes(y=Contrast, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=Lower, ymax=Upper), width=0.2) +
# scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'log(odds) by group',
x = "Groups",
y = "log(odds)")) +
theme_bw()
odds.4.00 <- contrast(results1, a = list(x = 0, z=0))
odds.4.01 <- contrast(results1, a = list(x = 0, z=1))
odds.4.10 <- contrast(results1, a = list(x = 1, z=0))
odds.4.11 <- contrast(results1, a = list(x = 1, z=1))
odds <- cbind.data.frame(
type=c("00", "01", "10", "11"),
rbind.data.frame( odds.4.00[c(3:6)],
odds.4.01[c(3:6)],
odds.4.10[c(3:6)],
odds.4.11[c(3:6)]))
odds$type <- factor(odds$type, labels=c("x=0 and z=0",
"x=0 and z=1",
"x=1 and z=0",
"x=1 and z=1"))
# Make plot
ggplot(odds, aes(y=Contrast, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=Lower, ymax=Upper), width=0.2) +
# scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'log(odds) by group',
x = "Groups",
y = "log(odds)")) +
theme_bw()
odds.4.00 <- contrast(results1(), a = list(x = 0, z=0))
odds.4.01 <- contrast(results1(), a = list(x = 0, z=1))
odds.4.10 <- contrast(results1(), a = list(x = 1, z=0))
odds.4.11 <- contrast(results1(), a = list(x = 1, z=1))
odds <- cbind.data.frame(
type=c("00", "01", "10", "11"),
rbind.data.frame(
odds.4.00[c(3:6)],
odds.4.01[c(3:6)],
odds.4.10[c(3:6)],
odds.4.11[c(3:6)])) # this is estimate of log odds
odds$divide <- exp(odds$Contrast -odds$Contrast[1]) # this is odds ratio (log difference in log odds relative to odds of 00, considered baseline)
# make groups for or
odds$xvar <- ifelse(odds$type %in% c("10", "11"), 1 ,0)
odds$zvar <- ifelse(odds$type %in% c("01", "11"), 1 ,0)
# both estimates are differences in log odds. take exp of qty to get odds ratio
# make a 2 by 2 table of odds ratios
# ##################################
tableodds = dcast(odds, xvar~zvar, value.var="divide", fun.aggregate=mean)
or.01 <- contrast(results1(), list(x = 0, z=1),
list(x = 0, z=0))
or.10 <- contrast(results1(), list(x = 1, z=0),
list(x = 0, z=0))
or.11 <- contrast(results1(), list(x = 1, z=1),
list(x = 0, z=0))
icr.1 = exp(or.11$Contrast) - exp(or.10$Contrast) - exp(or.01$Contrast) + 1
icr.1
expected.11 <- exp(or.10$Contrast) + exp(or.01$Contrast) - 1
icr = list(icr.1=icr.1, expected.11 = expected.11, or.11=or.11$Contrast)
or.01 <- contrast(results1, list(x = 0, z=1),
list(x = 0, z=0))
or.10 <- contrast(results1, list(x = 1, z=0),
list(x = 0, z=0))
or.11 <- contrast(results1, list(x = 1, z=1),
list(x = 0, z=0))
icr.1 = exp(or.11$Contrast) - exp(or.10$Contrast) - exp(or.01$Contrast) + 1
icr.1
expected.11 <- exp(or.10$Contrast) + exp(or.01$Contrast) - 1
icr = list(icr.1=icr.1, expected.11 = expected.11, or.11=or.11$Contrast)
results2 <- glm(y ~ x, family="binomial", data=df)
results3 <- glm(y ~ z, family="binomial", data=df)
results4 <- glm(y ~, family="binomial", data=df)
results4 <- glm(y ~ ., family="binomial", data=df)
sapply(list(results2, results3, results4), summary)
lapply(list(results2, results3, results4), summary)
results4 <- glm(y ~ 1, family="binomial", data=df)
lapply(list(results2, results3, results4), summary)
results2 <- glm(y ~ x, family="binomial", data=df) # crude estimate for x
summary(results2)
coef(results2)
exp(coef(results2)[2])
coef(results1)
exp(coef(results1)[1]) # crude or for x variable in stratum for z=0
exp(coef(results1)[2]) # crude or for x variable in stratum for z=0
exp(sum(coef(results1)[c(2,4)])) # crude or for x variable in stratum for z=1
coef(results1)[c(2,4)]
ns=100
confound=T
interact=T
beta0 = 0.5
beta1 = 0.1
beta2 = 0
beta3 = 1
# Get exposure, x, and covariate, z.
# if confounder, it is dependent on x with some random error
x.1 <- sample(c(0,1), ns, replace=T, prob=c(0.5,0.5))
ez <- rnorm(ns, mean=0, sd=0.01) # random error term for z
z.1 <- ifelse(rep(confound,ns),
rbinom(ns, 1,  expit(-(round(3*x.1 + ez, 1)))),
sample(c(0,1), ns, replace=T, prob=c(0.5,0.5))
)                                           # return confounder if confound=T,
# otherwise return a dichotomous variable with 50/50 distirbution
e4 <- rnorm(ns, mean=0, sd=0.01) # random error term
lp <- ifelse(rep(interact, ns),
beta0 + beta1*x.1 + beta2*z.1 + beta3*x.1*z.1 + e4,
beta0 + beta1*x.1 + beta2*z.1 + e4)
# linear predictor (lp)
pr <- expit(lp)        # apply inverse logit function to lp to get probability
y  <- rbinom(ns, 1, pr)     # generate bernoulli response variable with probability pr.4 for n1 number of observations.
df <- data.frame(y=y, x=x.1, z=z.1)
expit <- function(x) 1/(1+exp(-x))
with(df, table(z, y, x))
# alternate way of getting two by two table
dcast(df, z + y ~ x, value.var="z", fun.aggregate=length)
# Use simulated data to run logistic regression
results1 <- glm( y ~ x*z, family="binomial", data=df)
summary(results1)
exp(coef(results1)[2]) # crude or for x variable in stratum for z=0
exp(sum(coef(results1)[c(2,4)])) # crude or for x variable in stratum for z=1
coef(results1)[c(2,4)]
coef(results1)
summary(results)
summary(results1)
ns=100
confound=T
interact=T
beta0 = 0.5
beta1 = 0.1
beta2 = 0
beta3 = 1
# Get exposure, x, and covariate, z.
# if confounder, it is dependent on x with some random error
x.1 <- sample(c(0,1), ns, replace=T, prob=c(0.5,0.5))
ez <- rnorm(ns, mean=0, sd=0.01) # random error term for z
z.1 <- ifelse(rep(confound,ns),
rbinom(ns, 1,  expit(-(round(3*x.1 + ez, 1)))),
sample(c(0,1), ns, replace=T, prob=c(0.5,0.5))
)                                           # return confounder if confound=T,
# otherwise return a dichotomous variable with 50/50 distirbution
e4 <- rnorm(ns, mean=0, sd=0.01) # random error term
lp <- ifelse(rep(interact, ns),
beta0 + beta1*x.1 + beta2*z.1 + beta3*x.1*z.1 + e4,
beta0 + beta1*x.1 + beta2*z.1 + e4)
# linear predictor (lp)
pr <- expit(lp)        # apply inverse logit function to lp to get probability
y  <- rbinom(ns, 1, pr)     # generate bernoulli response variable with probability pr.4 for n1 number of observations.
df <- data.frame(y=y, x=x.1, z=z.1)
expit <- function(x) 1/(1+exp(-x))
with(df, table(z, y, x))
# alternate way of getting two by two table
dcast(df, z + y ~ x, value.var="z", fun.aggregate=length)
# Use simulated data to run logistic regression
results1 <- glm( y ~ x*z, family="binomial", data=df)
summary(results1)
ns=100
confound=T
interact=T
beta0 = 0.5
beta1 = 0.1
beta2 = 0
beta3 = 0.1
# Get exposure, x, and covariate, z.
# if confounder, it is dependent on x with some random error
x.1 <- sample(c(0,1), ns, replace=T, prob=c(0.5,0.5))
ez <- rnorm(ns, mean=0, sd=0.01) # random error term for z
z.1 <- ifelse(rep(confound,ns),
rbinom(ns, 1,  expit(-(round(3*x.1 + ez, 1)))),
sample(c(0,1), ns, replace=T, prob=c(0.5,0.5))
)                                           # return confounder if confound=T,
# otherwise return a dichotomous variable with 50/50 distirbution
e4 <- rnorm(ns, mean=0, sd=0.01) # random error term
lp <- ifelse(rep(interact, ns),
beta0 + beta1*x.1 + beta2*z.1 + beta3*x.1*z.1 + e4,
beta0 + beta1*x.1 + beta2*z.1 + e4)
# linear predictor (lp)
pr <- expit(lp)        # apply inverse logit function to lp to get probability
y  <- rbinom(ns, 1, pr)     # generate bernoulli response variable with probability pr.4 for n1 number of observations.
df <- data.frame(y=y, x=x.1, z=z.1)
expit <- function(x) 1/(1+exp(-x))
with(df, table(z, y, x))
# alternate way of getting two by two table
dcast(df, z + y ~ x, value.var="z", fun.aggregate=length)
# Use simulated data to run logistic regression
results1 <- glm( y ~ x*z, family="binomial", data=df)
summary(results1)
res.none <- glm( y ~ x , family="binomial", data=df )
o.x.crude <- contrast(res.none,
list(x = 1),
list(x = 0)) # difference in log odds of x=1 and x=0
res.none.check = list(results.none=res.none, odds.x.crude=o.x.crude)
coef(res.none) # crude estimate of log or for x
coef(results1) # coef for logisitic regression model with interaction
exp(coef(res.none)[2]) # crude or
exp(coef(results1)[2]) # crude or for x variable in stratum for z=0
exp(sum(coef(results1)[c(2,4)])) # crude or for x variable in stratum for z=1
odds.4.00 <- contrast(results1, a = list(x = 0, z=0)); odds.4.00
odds.crude <- contrast(res.none, a = list(x = 1)); odds.crude
# compare crude with stratum specific or
exp(coef(res.none)[2]) # crude or
odds.crude <- contrast(res.none, a = list(x = 1, x=0)); odds.crude
list(x = 1, x=0)
exp(coef(res.none))
odds.crude <- contrast(res.none, a = list(x = 1, x=0)); exp(odds.crude)
odds.crude
exp(0.5389)
?contrast
odds.crude <-  contrast(res.none,
list(x = 1),
list(x = 0)) # difference in log odds of x=1 and x=0
exp(coef(res.none))
odds.crude
exp(coef(res.none))
odds.crude[1]
exp(odds.crude[1])
odds.crude
odds.crude; exp(-0.1141133)
odds.4.00[c(3:6)]
odds <- cbind.data.frame(
type=c("00", "01", "10", "11"),
rbind.data.frame( odds.4.00[c(3:6)],
odds.4.01[c(3:6)],
odds.4.10[c(3:6)],
odds.4.11[c(3:6)]))
odds$type <- factor(odds$type, labels=c("x=0 and z=0",
"x=0 and z=1",
"x=1 and z=0",
"x=1 and z=1"))
odds
odds.z0 <-  contrast(results1,
list(x = 1, z=0),
list(x = 0, z=0)) # difference in log odds of x=1 and x=0
odds.z0
coef(results1)
exp(sum(coef(results1)[2,4]))
exp(sum(coef(results1)[c(2,4)]))
odds.z0; exp(0.04879)
exp(sum(coef(results1)[c(3)]))
exp(sum(coef(results1)[c(2)]))
odds.z1 <-  contrast(results1,
list(x = 1, z=1),
list(x = 0, z=1)) # difference in log odds of x=1 and x=0
odds.z1
odds.z1; exp(-0.1335314) # checking...
exp(sum(coef(results1)[c(2,4)]))
odds.2 <- cbind.data.frame(
type=c("Crude", "Strata, z=0", "Strata, z=1"),
rbind.data.frame( odds.crude[c(3:6)],
odds.z0[c(3:6)],
odds.z1[c(3:6)])
odds.2
odds.2 <- cbind.data.frame(
type=c("Crude", "Strata, z=0", "Strata, z=1"),
rbind.data.frame( odds.crude[c(3:6)],
odds.z0[c(3:6)],
odds.z1[c(3:6)]))
odds.2
odds.crude
odds.z0
odds.z1
rbind.data.frame( odds.crude[c(3:6)],
odds.z0[c(3:6)],
odds.z1[c(3:6)])
odds.crude[c(3:6)]
odds.z0[c(3:6)]
odds.crude[c(3:5)]
odds.crude[c(4:6)]
odds.crude[c(3:6)]
dds.z0[c(3:6)]
odds.z0[c(3:6)]
odds.z1
odds.crude[c(1:4)]
odds.2 <- cbind.data.frame(
type=c("Crude", "Strata, z=0", "Strata, z=1"),
rbind.data.frame( odds.crude[c(1:4)],
odds.z0[c(1:4)],
odds.z1[c(1:4)])
)
rbind.data.frame( odds.crude[c(1:4)],
odds.z0[c(1:4)],
odds.z1[c(1:4)])
odds.crude[c(1:4)]
odds.z0[c(1:4)]
odds.z0[c(2:5)]
odds.2 <- cbind.data.frame(
type=c("Crude", "Strata, z=0", "Strata, z=1"),
rbind.data.frame( odds.crude[c(1:4)],
odds.z0[c(2:5)],
odds.z1[c(2:5)])
)
odds.2
odds.2
odds.2$or = exp(Constrast)
odds.2$or.lower = exp(Contrast-1.96*SE)
odds.2$or.upper = exp(Contrast+1.96*SE)
odds.2
odds.2$or = exp(odds.2$Constrast)
odds.2$or.lower = exp(odds.2$Contrast-1.96*SE)
odds.2$or.upper = exp(odds.2$Contrast+1.96*SE)
odds.2
odds.2 = within(odds.2,
{or = exp(Constrast)
or.lower = exp(Contrast-1.96*SE)
or.upper = exp(Contrast+1.96*SE)}
)
odds.2
odds.2
odds.2 <- cbind.data.frame(
type=c("Crude", "Strata, z=0", "Strata, z=1"),
rbind.data.frame( odds.crude[c(1:4)],
odds.z0[c(2:5)],
odds.z1[c(2:5)])
)
odds.2 = within(odds.2, {
or = exp(Constrast)
or.lower = exp(Contrast-1.96*SE)
or.upper = exp(Contrast+1.96*SE)
})
odds.2
names(odds.2)
odds.2 = within(odds.2, {
or = exp(Contrast)
or.lower = exp(Contrast-1.96*SE)
or.upper = exp(Contrast+1.96*SE)
})
odds.2
odds.2 = within(odds.2, {
OR = exp(Contrast)
OR.lower = exp(Contrast-1.96*SE)
OR.upper = exp(Contrast+1.96*SE)
})
odds.2
odds.2 <- cbind.data.frame(
type=c("Crude", "Strata, z=0", "Strata, z=1"),
rbind.data.frame( odds.crude[c(1:4)],
odds.z0[c(2:5)],
odds.z1[c(2:5)])
)
odds.2 = within(odds.2, {
OR = exp(Contrast)
OR.lower = exp(Contrast-1.96*SE)
OR.upper = exp(Contrast+1.96*SE)
})
odds.2
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
# scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by group',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by group',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
odds.2 <- cbind.data.frame(
type=c( "Strata, z=0", "Crude", "Strata, z=1"),
rbind.data.frame( odds.z0[c(2:5)],
odds.crude[c(1:4)],
odds.z1[c(2:5)])
)
odds.2 = within(odds.2, {
OR.lower = exp(Contrast-1.96*SE)
OR = exp(Contrast)
OR.upper = exp(Contrast+1.96*SE)
})
odds.2
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by strata and crude in model with multiplicative interaction.',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
odds.2 = within(odds.2, {
OR.lower = exp(Contrast-1.96*SE)
OR = exp(Contrast)
OR.upper = exp(Contrast+1.96*SE)
})
odds.2
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by strata and crude in model with multiplicative interaction.',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
levels(odds.2$type)
levels(odds.2$type)
odds.2$type = factor(type, levels=c("Strata, z=0",
"Strata, z=1",
"Crude")) # change order of type
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by strata and crude in model with multiplicative interaction.',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
odds.2$type = factor(odds.2type, levels=c("Strata, z=0",
"Strata, z=1",
"Crude")) # change order of type
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by strata and crude in model with multiplicative interaction.',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
odds.2$type = factor(odds.2$type, levels=c("Strata, z=0",
"Strata, z=1",
"Crude")) # change order of type
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by strata and crude in model with multiplicative interaction.',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
levels(odds.2$type)
odds.2$type = factor(odds.2$type, levels=c("Strata, z=0",
"Crude",
"Strata, z=1")) # change order of type
levels(odds.2$type)
ggplot(odds.2, aes(y=OR, x=type)) +
geom_point() +
geom_errorbar(aes(ymin=OR.lower, ymax=OR.upper), width=0.2) +
scale_y_log10() +
geom_hline(yintercept = 0, linetype=2) +
coord_flip() +
labs(list(
title = 'Odds ratios by strata and crude in model with multiplicative interaction.',
x = "Groups",
y = "Odds ratios")) +
theme_bw()
shiny::runApp('C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf')
shiny::runApp('C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf')
shiny::runApp('C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf')
shiny::runApp('C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf')
setwd("C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf")
deployApp() # deploy app
library(devtools)
#devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp() # deploy app
setwd("C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf")
deployApp() # deploy app
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp() # deploy app
?HTML
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#setwd("C:/Users/vonholle/Documents/grad_school/misc/sites/int_and_conf")
setwd("C:/Users/vonholle/Dropbox/unc.grad.school/programming/shinyapps/int-and-conf")
deployApp() # deploy app
deployApp() # deploy app
